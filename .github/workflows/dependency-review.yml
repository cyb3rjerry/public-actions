name: Coveo Dependency Reviewer

on:
  workflow_call:
    inputs:
      public:
        required: true
        type: boolean
        default: false
      distributed:
        required: true
        type: boolean
        default: true
      comment-summary-in-pr:
        description: Determines if the summary is posted as a comment in the PR itself. Setting this to `always` or `on-failure` requires you to give the workflow the write permissions for pull-requests
        required: false
        default: on-failure
        type: string
      base-ref:
        description: Provide custom git references for the git base
        required: false
        default: ${{ github.event.pull_request.base.sha }}
        type: string
      head-ref:
        description: Provide custom git references for the git head
        required: false
        default: ${{ github.event.pull_request.head.sha }}
        type: string
      fail-on-severity:
        description: Defines the threshold for the level of severity. The action will fail on any pull requests that introduce vulnerabilities of the specified severity level or higher.
        required: false
        default: high
        type: string
      runs-on:
        description: |
          The type of machine to run the job on. Must be provided as a stringified list (e.g. `runs-on: '["ubuntu-latest","self-hosted"]'`)
        default: '["ubuntu-latest"]'
#        default: '["coveo", "arm64" , "linux", "eks"]'  # restore once public repos specify ubuntu-latest
        type: string

jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ${{ fromJson(inputs.runs-on) }}
    steps:
      - name: Checkout scan target
        uses: actions/checkout@v4

      - name: Checkout licenses
        uses: actions/checkout@v4
        with:
          repository: coveo/dependency-allowed-licenses
          path: coveo-dependency-allowed-licenses

      - name: Select configuration
        id: select-config
        uses: actions/github-script@v7
        env:
          INPUTS: ${{ toJSON(inputs) }}
        with:
          result-encoding: string
          script: |
            const inputs = JSON.parse(process.env.INPUTS)
            if (inputs.public) {
              return 'public.yml'
            }
            if (!inputs.public && inputs.distributed) {
              return 'private-distributed.yml'
            }
            if (!inputs.public && !inputs.distributed) {
              return 'private-undistributed.yml'
            }

            core.setFailure(`Could not determine configuration for inputs: ${inputs}`)

      - name: Scan
        uses: actions/dependency-review-action@v4
        with:
          comment-summary-in-pr: ${{ inputs.comment-summary-in-pr }}
          fail-on-severity: ${{ inputs.fail-on-severity }}
          config-file: ./coveo-dependency-allowed-licenses/${{ steps.select-config.outputs.result }}
          base-ref: ${{ inputs.base-ref }}
          head-ref: ${{ inputs.head-ref }}
